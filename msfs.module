<?php

/**
 * Implements hook_menu().
 */
function msfs_menu()
{
  $items = [];

  $items['admin/config/media/msfs/client/configure/servers'] = [
    'title' => t('Configure servers'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['_msfs_configure_servers_form'],
    'access arguments' => ['administer msfs client configuration'],
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['admin/config/media/msfs/client/configure/servers/add'] = [
    'title' => t('Add new server'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['_msfs_add_server_form'],
    'access arguments' => ['administer msfs client configuration'],
    'type' => MENU_LOCAL_ACTION,
  ];

  $items['admin/config/media/msfs/client/configure/servers/%/edit'] = [
    'title' => t('Edit server'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['_msfs_edit_server_form', 7],
    'access arguments' => ['administer msfs client configuration'],
    'type' => MENU_CALLBACK,
  ];

  $items['admin/config/media/msfs/client/configure/servers/%/info'] = [
    'title' => t('Server info'),
    'page callback' => '_msfs_server_info_page',
    'page arguments' => [7],
    'access arguments' => ['administer msfs client configuration'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function msfs_permission()
{
  return [
    'administer msfs client configuration' => [
      'title' => t('Administer msfs configuration'),
    ],
  ];
}

function msfs_get_servers() {
  return db_select('msfs_servers', 'ms')
    ->fields('ms')
    ->execute()
    ->fetchAll();
}

function msfs_get_server($id) {
  return db_select('msfs_servers', 'ms')
    ->fields('ms')
    ->condition('id', $id)
    ->execute()
    ->fetchAssoc();
}

function msfs_load_server($id) {
  $server_data = msfs_get_server($id);
  return drupal_json_decode(_msfs_request_to_server($server_data['site_url'].'/msfs/api/info'));
}

function msfs_add_server($data) {
  return drupal_write_record('msfs_servers', $data);
}

function _msfs_request_to_server($path) {
  $result = @file_get_contents($path);
  return preg_replace('/[\x00-\x1F\x80-\xFF]/', '', $result);
}

function _msfs_configure_servers_form($form = [], &$form_state) {
  $servers = msfs_get_servers();
  $form['servers'] = [
    '#type' => 'tableselect',
    '#header' => [
      'id' => [
        'data' => t('ID'),
      ],
      'site_url' => [
        'data' => t('Site url'),
      ],
      'access_key' => [
        'data' => t('Access key'),
      ],
      'actions' => [
        'data' => t('Actions'),
      ],
    ],
  ];

  foreach ($servers as $server) {
    $form['servers']['#options'][$server->id]['id'] = $server->id;
    $form['servers']['#options'][$server->id]['site_url'] = $server->site_url;
    $form['servers']['#options'][$server->id]['access_key'] = $server->access_key;
    $form['servers']['#options'][$server->id]['actions'] = theme_links([
      'links' => [
        [
          'title' => t('Edit'),
          'href' => current_path().'/'.$server->id.'/edit',
        ],
        [
          'title' => t('Info'),
          'href' => current_path().'/'.$server->id.'/info',
        ],
      ],
      'attributes' => ['class' => ['links', 'inline']],
      'heading' => [],
    ]);
  }

  return $form;
}

function _msfs_add_server_form($form = [], &$form_state) {
  $form['site_url'] = [
    '#type' => 'textfield',
    '#title' => t('Site url'),
    '#maxlength' => 255,
    '#required' => TRUE,
  ];

  $form['access_key'] = [
    '#type' => 'textfield',
    '#title' => t('Access key'),
    '#maxlength' => 64,
    '#required' => TRUE,
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save'),
  ];

  $form_state['#rebuild'] = TRUE;
  return $form;
}

function _msfs_add_server_form_validate($form, &$form_state) {
  $data = $form_state['values'];
  if (_msfs_request_to_server(rtrim($data['site_url'], '/').'/msfs/api/ping?access_key='.$data['access_key'].'&ignore_caching') != 'pong') {
    form_set_error('access_key', t('Can\'t establish connection to server "<b>@server</b> with" access key "<b>@access_key</b>"', [
      '@server' => $data['site_url'],
      '@access_key' => $data['access_key'],
    ]));
  }
}

function _msfs_add_server_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  if (msfs_add_server([
    'site_url' => rtrim($values['site_url'], '/'),
    'access_key' => $values['access_key'],
  ])) {
    drupal_set_message(t('Server saved!'));
    drupal_goto('admin/config/media/msfs/client/configure/servers');
  }
  else {
    drupal_set_message('Error!', 'error');
  }
  return $form;
}

function _msfs_server_info_page($server_id) {
  $server_data = msfs_load_server($server_id);

  $output = '';
  $output .= '<div><b>Status:</b> '.$server_data['status'].'</div>';
  $output .= '<div><b>Files stored:</b> '.$server_data['files_stored'].'</div>';
  $output .= '<div><b>MSFS Server module version:</b> '.$server_data['version'].'</div>';
  $output .= '<div><b>OS info:</b> '.$server_data['server']['OS_INFO'].'</div>';
  $output .= '<div><b>PHP version:</b> '.$server_data['server']['PHP_VERSION'].'</div>';
  $output .= '<div><b>Disk status:</b> <br>- <i>Total:</i> '.$server_data['disk']['total'].'<br> - <i>Free:</i> '.$server_data['disk']['free'].'</div>';
  //  $output .= '<b>$_SERVER:</b><pre>'.print_r($server_data['server']['_SERVER'], true).'</pre>';
  foreach ($server_data['transfer'] as $key => $value) {
    $output .= '<div>';
      $output .= '<b>'.ucfirst($key).'</b>:<br>';
      foreach ($value as $k => $v) {
        $output .= ' - <b><i>'.$k.'</i></b>: '.$v.'<br>';
      }
    $output .= '</div>';
  }

  return $output;
}


/**
 * Implements hook_stream_wrappers().
 */
function msfs_stream_wrappers()
{
  return [
    'msfs' => [
      'name' => t('MSFS stream wrapper'),
      'class' => 'MSFSStreamWrapper',
      'description' => t('Multi server file storage'),
      'type' => STREAM_WRAPPERS_NORMAL,
    ],
  ];
}

function msfs_load_file_by_uri($uri) {
  $b = 1;
  $files = file_load_multiple([], ['uri' => $uri]);
  if (empty($files)) return FALSE;
  $file = reset($files);
//  db_select('msfs_stored_files', 'msf')
//  ->condition('');
}

class MSFSStreamWrapper extends DrupalPublicStreamWrapper implements DrupalStreamWrapperInterface {

  /**
   * Instance URI referenced as "<scheme>://key".
   *
   * @var string
   */
  protected $uri = NULL;

  /**
   * Directory listing used by the dir_* methods.
   *
   * @var array
   */
  protected $dir = NULL;

  public function __construct() {

  }


  public function chmod($mode) {
    return TRUE;
  }

  public function dir_closedir() {
    unset($this->dir);
    return TRUE;
  }

  public function dir_opendir($uri, $options) {
    // TODO: Implement dir_opendir() method.
    $b = 1;
  }

  public function dir_readdir() {
    // TODO: Implement dir_readdir() method.
    $b = 1;
  }

  public function dir_rewinddir() {
    reset($this->dir);
    return TRUE;
  }

  public function dirname($uri = NULL) {
    if (!isset($uri)) {
      $uri = $this->uri;
    }
    $scheme = file_uri_scheme($uri);
    $dirname = dirname(file_uri_target($uri));


    if ($dirname == '.') {
      $dirname = '';
    }

    return "$scheme://$dirname";
  }

  public function getExternalUrl() {
    // TODO: Implement getExternalUrl() method.
    $b = 1;
  }

  public function mkdir($uri, $mode, $options) {
    // TODO: Implement mkdir() method.
    $b = 1;
    return TRUE;
  }

  public function realpath() {
    return FALSE;
  }

  public function rename($from_uri, $to_uri) {
    // TODO: Implement rename() method.
    $b = 1;
  }

  public function rmdir($uri, $options) {
    // TODO: Implement rmdir() method.
    $b = 1;
  }

  public function setUri($uri) {
    $this->uri = $uri;
  }

  public function getUri() {
    return $this->uri;
  }

  public function stream_close() {
    // TODO: Implement stream_close() method.
    $b = 1;
  }

  public function stream_eof() {
    // TODO: Implement stream_eof() method.
    $b = 1;
  }

  public function stream_open($uri, $mode, $options, &$opened_url) {
    // TODO: Implement stream_open() method.
    $b = 1;
    $uri = ltrim($uri, 'msfs://');
    $file = msfs_load_file_by_uri($uri);
  }

  public function stream_lock($operation) {
    // TODO: Implement stream_lock() method.
    $b = 1;
  }

  public function stream_read($count) {
    // TODO: Implement stream_read() method.
    $b = 1;
  }

  public function stream_write($data) {
    // TODO: Implement stream_write() method.
    $b = 1;
  }

  public function stream_seek($offset, $whence) {
    // TODO: Implement stream_seek() method.
    $b = 1;
  }

  public function stream_flush() {
    // TODO: Implement stream_flush() method.
    $b = 1;
  }

  public function stream_tell() {
    // TODO: Implement stream_tell() method.
    $b = 1;
  }

  public function stream_stat() {
    // TODO: Implement stream_stat() method.
    $b = 1;
  }

  public function unlink($uri) {
    // TODO: Implement unlink() method.
    $b = 1;
  }

  public function url_stat($uri, $flags) {
    // TODO: Implement url_stat() method.
    $b = 1;
  }

  public static function getMimeType($uri, $mapping = NULL) {
    // TODO: Implement getMimeType() method.
    $b = 1;
  }

  /**
   * Gets the path that the wrapper is responsible for.
   *
   * This function isn't part of DrupalStreamWrapperInterface, but the rest
   * of Drupal calls it as if it were, so we need to define it.
   *
   * @return string
   *   The empty string. Since this is a remote stream wrapper,
   *   it has no directory path.
   */
  public function getDirectoryPath() {
    return '';
  }

}